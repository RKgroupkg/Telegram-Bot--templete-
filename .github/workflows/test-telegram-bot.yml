name: Test Telegram Bot

# Simplified workflow that runs manually
on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug logging'
        required: false
        default: false
        type: boolean
      test_duration:
        description: 'Maximum test duration (minutes)'
        required: false
        default: '5'
        type: string
      python_version:
        description: 'Python version'
        required: false
        default: '3.10'
        type: choice
        options:
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
      bot_file:
        description: 'Main bot file to run (if not auto-detected)'
        required: false
        default: ''
        type: string

jobs:
  test-bot:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(github.event.inputs.test_duration || '5') }}
    
    # Add concurrency group to allow cancellation of previous runs
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1  # Shallow clone for faster checkout
    
    - name: Set up Python ${{ github.event.inputs.python_version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ github.event.inputs.python_version }}
        cache: 'pip'  # Automatically handle pip caching
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        elif [ -f setup.py ]; then
          pip install -e .
        else
          echo "::warning::No requirements.txt or setup.py found. Please add one for proper dependency management."
          # Install pyrogram as fallback since we know it's a pyrogram bot
          pip install pyrogram tgcrypto
        fi
        # Install testing tools
        pip install pytest pytest-cov pylint
    
    - name: Verify required secrets
      run: |
        MISSING_SECRETS=()
        
        if [ -z "${{ secrets.API_ID }}" ]; then
          MISSING_SECRETS+=("API_ID")
        fi
        if [ -z "${{ secrets.API_HASH }}" ]; then
          MISSING_SECRETS+=("API_HASH")
        fi
        if [ -z "${{ secrets.BOT_TOKEN }}" ]; then
          MISSING_SECRETS+=("BOT_TOKEN")
        fi
        
        if [ ${#MISSING_SECRETS[@]} -ne 0 ]; then
          echo "::error::Missing required secrets: ${MISSING_SECRETS[*]}"
          echo "Please add these secrets in your GitHub repository settings."
          exit 1
        fi
    
    - name: Create simple time offset for Pyrogram
      run: |
        cat > time_config.py << 'EOF'
        import pyrogram

        # Simple time offset configuration (10 seconds)
        pyrogram.session.internals.MsgId.set_offset(10)
        print("Set time offset for Pyrogram")
        EOF
        
        python time_config.py
    
    - name: Run Telegram bot
      id: run-bot
      env:
        # Access all your secret variables
        API_ID: ${{ secrets.API_ID }}
        API_HASH: ${{ secrets.API_HASH }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        # Add commonly used Telegram bot environment variables
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        # Add test duration as environment variable
        TEST_DURATION_MINUTES: ${{ github.event.inputs.test_duration || '5' }}
        # Add Python path
        PYTHONPATH: ${{ github.workspace }}
      run: |
        echo "Starting Telegram bot test run..."
        echo "Python version: $(python --version)"
        echo "Working directory: $(pwd)"
        echo "Test duration: $TEST_DURATION_MINUTES minutes"
        
        # Detect bot entry point file
        BOT_FILE="${{ github.event.inputs.bot_file }}"
        if [ -z "$BOT_FILE" ]; then
          for file in main.py bot.py app.py __main__.py run.py telegram_bot.py start.py; do
            if [ -f "$file" ]; then
              BOT_FILE="$file"
              break
            fi
          done
        fi
        
        if [ -z "$BOT_FILE" ]; then
          echo "::warning::Could not find a standard bot entry file. Please specify file manually."
          echo "Looking for any Python file that imports pyrogram..."
          POTENTIAL_FILES=$(grep -l "from pyrogram import" $(find . -name "*.py" | grep -v "__pycache__") 2>/dev/null || echo "")
          if [ -n "$POTENTIAL_FILES" ]; then
            BOT_FILE=$(echo "$POTENTIAL_FILES" | head -n 1)
            echo "Found potential bot file: $BOT_FILE"
          else
            echo "::error::No bot file found. Please specify the main bot file using the 'bot_file' input."
            exit 1
          fi
        fi
        
        echo "Using bot file: $BOT_FILE"
        
        # Create a wrapper script for timeout handling
        cat > run_with_timeout.sh << 'EOF'
        #!/bin/bash
        TIMEOUT=$((${TEST_DURATION_MINUTES:-5} * 60))
        echo "Running bot with ${TIMEOUT}s timeout..."
        
        # Add Pyrogram time offset to bot execution
        python -c "
import pyrogram
import sys

# Set a simple time offset to handle time sync issues
pyrogram.session.internals.MsgId.set_offset(10)

# Run the bot file
sys.path.insert(0, '.')
with open('$1', 'r') as f:
    exec(f.read())
" ${@:2} &
        BOT_PID=$!
        
        # Create trap to handle cleanup
        trap "echo 'Stopping bot...'; kill -SIGTERM $BOT_PID 2>/dev/null; exit 0" SIGINT SIGTERM
        
        # Wait for timeout or external cancellation
        sleep $TIMEOUT &
        SLEEP_PID=$!
        wait $SLEEP_PID
        
        # Timeout reached, kill the bot
        echo "Test duration reached, stopping bot..."
        kill -SIGTERM $BOT_PID 2>/dev/null
        exit 0
        EOF
        
        chmod +x run_with_timeout.sh
        
        # Run with appropriate flags based on debug setting
        echo "------- BOT OUTPUT LOG START -------"
        if [ "${{ github.event.inputs.debug_enabled }}" == "true" ]; then
          echo "Running in DEBUG mode"
          ./run_with_timeout.sh "$BOT_FILE" --debug | tee bot_output.log
        else
          echo "Running in NORMAL mode"
          ./run_with_timeout.sh "$BOT_FILE" | tee bot_output.log
        fi
        echo "------- BOT OUTPUT LOG END -------"
    
    - name: Upload logs
      if: always()  # Run even if previous steps failed
      uses: actions/upload-artifact@v4
      with:
        name: bot-logs-${{ github.run_id }}
        path: |
          *.log
          logs/
          log/
        if-no-files-found: warn
    
    - name: Summarize test run
      if: always()
      run: |
        echo "## Telegram Bot Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Duration**: ${{ github.event.inputs.test_duration || '5' }} minutes" >> $GITHUB_STEP_SUMMARY
        echo "- **Python Version**: ${{ github.event.inputs.python_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Debug Mode**: ${{ github.event.inputs.debug_enabled }}" >> $GITHUB_STEP_SUMMARY
        
        # Make sure we have BOT_FILE defined for the summary
        BOT_FILE="${{ github.event.inputs.bot_file }}"
        if [ -z "$BOT_FILE" ]; then
          for file in main.py bot.py app.py __main__.py run.py telegram_bot.py start.py; do
            if [ -f "$file" ]; then
              BOT_FILE="$file"
              break
            fi
          done
        fi
        if [ -n "$BOT_FILE" ]; then
          echo "- **Bot File Used**: $BOT_FILE" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Bot File Used**: Not found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "To stop this test run early, you can cancel the workflow from the Actions page." >> $GITHUB_STEP_SUMMARY
